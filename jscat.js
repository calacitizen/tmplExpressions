/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[8,16,17,24,29,32,35,60,61,66,67,68,69,70,120,121,122,123,124,125],$V1=[1,10],$V2=[1,13],$V3=[1,11],$V4=[1,41],$V5=[1,44],$V6=[1,50],$V7=[1,32],$V8=[1,33],$V9=[1,30],$Va=[1,31],$Vb=[1,34],$Vc=[1,35],$Vd=[1,36],$Ve=[1,49],$Vf=[1,51],$Vg=[1,52],$Vh=[1,53],$Vi=[1,54],$Vj=[1,55],$Vk=[8,10,16,17,24,29,32,35,60,61,66,67,68,69,70,120,121,122,123,124,125],$Vl=[8,10,16,17,29,32,35,60,61,66,67,68,69,70,120,121,122,123,124,125],$Vm=[2,13,17,32,35,48,60,61,68,69,72,73,74,81,82,83,84,88,89,90,91,104,108,112],$Vn=[2,28],$Vo=[2,13,17],$Vp=[2,13,17,108,112],$Vq=[2,13,17,104,108,112],$Vr=[2,13,17,88,89,90,91,104,108,112],$Vs=[2,13,17,81,82,83,84,88,89,90,91,104,108,112],$Vt=[2,13,17,68,69,81,82,83,84,88,89,90,91,104,108,112],$Vu=[2,13,17,68,69,72,73,74,81,82,83,84,88,89,90,91,104,108,112],$Vv=[1,90],$Vw=[1,89],$Vx=[2,13,17,60,61,68,69,72,73,74,81,82,83,84,88,89,90,91,104,108,112],$Vy=[1,100],$Vz=[2,10,13,17,19,32,34,35,36,48,60,61,68,69,72,73,74,81,82,83,84,88,89,90,91,104,108,112],$VA=[1,121],$VB=[2,10,13,17,19,34,36,68,69,72,73,74,81,82,83,84,88,89,90,91,104,108,112],$VC=[2,10,13,17,19,34,36,60,61,68,69,72,73,74,81,82,83,84,88,89,90,91,104,108,112],$VD=[1,158],$VE=[1,160],$VF=[1,164],$VG=[1,162],$VH=[1,163],$VI=[1,161],$VJ=[1,173],$VK=[13,34,36],$VL=[2,10,13,17,19,34,36],$VM=[2,10,13,17,19,34,36,108,112],$VN=[1,176],$VO=[2,10,13,17,19,34,36,104,108,112],$VP=[2,10,13,17,19,34,36,88,89,90,91,104,108,112],$VQ=[1,181],$VR=[1,182],$VS=[1,183],$VT=[1,184],$VU=[2,10,13,17,19,34,36,81,82,83,84,88,89,90,91,104,108,112],$VV=[2,10,13,17,19,34,36,68,69,81,82,83,84,88,89,90,91,104,108,112],$VW=[1,187],$VX=[1,188],$VY=[1,189],$VZ=[1,191],$V_=[8,13,16,29,32,35,36,60,61,66,67,68,69,70,120,121,122,123,124,125],$V$=[13,36],$V01=[10,13],$V11=[13,34];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Statement":3,"Block":4,"EmptyStatement":5,"ExpressionStatement":6,"LabelledStatement":7,"{":8,"StatementList":9,"}":10,"VariableDeclarationList":11,"VariableDeclaration":12,",":13,"VariableDeclarationListNoIn":14,"VariableDeclarationNoIn":15,"IDENTIFIER":16,";":17,"ExpressionNoBF":18,":":19,"FormalParameterList":20,"FunctionBody":21,"SourceElements":22,"Program":23,"EOF":24,"SourceElement":25,"PrimaryExpression":26,"PrimaryExpressionNoBrace":27,"ObjectLiteral":28,"THIS":29,"Literal":30,"ArrayLiteral":31,"(":32,"Expression":33,")":34,"[":35,"]":36,"Elision":37,"ElementList":38,"AssignmentExpression":39,"PropertyNameAndValueList":40,"PropertyAssignment":41,"PropertyName":42,"IdentifierName":43,"StringLiteral":44,"NumericLiteral":45,"PropertySetParameterList":46,"MemberExpression":47,".":48,"MemberExpressionNoBF":49,"NewExpression":50,"NewExpressionNoBF":51,"CallExpression":52,"Arguments":53,"CallExpressionNoBF":54,"ReservedWord":55,"ArgumentList":56,"LeftHandSideExpression":57,"LeftHandSideExpressionNoBF":58,"PostfixExpression":59,"++":60,"--":61,"PostfixExpressionNoBF":62,"UnaryExpression":63,"UnaryExpr":64,"UnaryExpressionNoBF":65,"BR++":66,"BR--":67,"+":68,"-":69,"!":70,"MultiplicativeExpression":71,"*":72,"/":73,"%":74,"MultiplicativeExpressionNoBF":75,"AdditiveExpression":76,"AdditiveExpressionNoBF":77,"ShiftExpression":78,"ShiftExpressionNoBF":79,"RelationalExpression":80,"<":81,">":82,"<=":83,">=":84,"RelationalExpressionNoIn":85,"RelationalExpressionNoBF":86,"EqualityExpression":87,"==":88,"!=":89,"===":90,"!==":91,"EqualityExpressionNoIn":92,"EqualityExpressionNoBF":93,"BitwiseANDExpression":94,"BitwiseANDExpressionNoIn":95,"BitwiseANDExpressionNoBF":96,"BitwiseXORExpression":97,"BitwiseXORExpressionNoIn":98,"BitwiseXORExpressionNoBF":99,"BitwiseORExpression":100,"BitwiseORExpressionNoIn":101,"BitwiseORExpressionNoBF":102,"LogicalANDExpression":103,"&&":104,"LogicalANDExpressionNoIn":105,"LogicalANDExpressionNoBF":106,"LogicalORExpression":107,"||":108,"LogicalORExpressionNoIn":109,"LogicalORExpressionNoBF":110,"ConditionalExpression":111,"?":112,"ConditionalExpressionNoIn":113,"AssignmentExpressionNoIn":114,"ConditionalExpressionNoBF":115,"AssignmentExpressionNoBF":116,"ExpressionNoIn":117,"NullLiteral":118,"BooleanLiteral":119,"RegularExpressionLiteral":120,"NULL":121,"TRUE":122,"FALSE":123,"NUMERIC_LITERAL":124,"STRING_LITERAL":125,"VOID":126,"$accept":0,"$end":1},
terminals_: {2:"error",8:"{",10:"}",13:",",16:"IDENTIFIER",17:";",19:":",24:"EOF",29:"THIS",32:"(",34:")",35:"[",36:"]",48:".",60:"++",61:"--",66:"BR++",67:"BR--",68:"+",69:"-",70:"!",72:"*",73:"/",74:"%",81:"<",82:">",83:"<=",84:">=",88:"==",89:"!=",90:"===",91:"!==",104:"&&",108:"||",112:"?",120:"RegularExpressionLiteral",121:"NULL",122:"TRUE",123:"FALSE",124:"NUMERIC_LITERAL",125:"STRING_LITERAL",126:"VOID"},
productions_: [0,[3,1],[3,1],[3,1],[3,1],[4,3],[9,2],[9,0],[11,1],[11,3],[14,1],[14,3],[12,1],[15,1],[5,1],[6,2],[6,2],[7,3],[20,1],[20,3],[21,1],[23,2],[22,2],[22,0],[25,1],[26,1],[26,1],[27,1],[27,1],[27,1],[27,1],[27,3],[31,2],[31,3],[31,3],[31,4],[31,5],[38,1],[38,2],[38,3],[38,4],[37,1],[37,2],[28,2],[28,3],[28,4],[40,1],[40,3],[41,3],[42,1],[42,1],[42,1],[46,1],[47,1],[47,4],[47,3],[49,1],[49,4],[49,3],[50,1],[51,1],[52,2],[52,2],[52,4],[52,3],[54,2],[54,2],[54,4],[54,3],[43,1],[43,1],[53,2],[53,3],[56,1],[56,3],[57,1],[57,1],[58,1],[58,1],[59,1],[59,2],[59,2],[62,1],[62,2],[62,2],[63,1],[63,1],[65,1],[65,1],[64,2],[64,2],[64,2],[64,2],[64,2],[64,2],[64,2],[71,1],[71,3],[71,3],[71,3],[75,1],[75,3],[75,3],[75,3],[76,1],[76,3],[76,3],[77,1],[77,3],[77,3],[78,1],[79,1],[80,1],[80,3],[80,3],[80,3],[80,3],[85,1],[85,3],[85,3],[85,3],[85,3],[86,1],[86,3],[86,3],[86,3],[86,3],[87,1],[87,3],[87,3],[87,3],[87,3],[92,1],[92,3],[92,3],[92,3],[92,3],[93,1],[93,3],[93,3],[93,3],[93,3],[94,1],[95,1],[96,1],[97,1],[98,1],[99,1],[100,1],[101,1],[102,1],[103,1],[103,3],[105,1],[105,3],[106,1],[106,3],[107,1],[107,3],[109,1],[109,3],[110,1],[110,3],[111,1],[111,5],[113,1],[113,5],[115,1],[115,5],[39,1],[114,1],[116,1],[33,1],[33,3],[117,1],[117,3],[18,1],[18,3],[30,1],[30,1],[30,1],[30,1],[30,1],[118,1],[119,1],[119,1],[45,1],[44,1],[55,1],[55,1],[55,1],[55,1],[55,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 5:

            this.$ = new BlockStatementNode($$[$0-1]);
        
break;
case 6: case 22: case 38:

            this.$ = $$[$0-1].concat($$[$0]);
        
break;
case 7: case 23: case 71:

            this.$ = [];
        
break;
case 8: case 10: case 37: case 46: case 73:

            this.$ = [$$[$0]];
        
break;
case 9: case 11: case 39: case 47: case 74:

            this.$ = $$[$0-2].concat($$[$0]);
        
break;
case 12: case 13:

            this.$ = new VariableDeclaratorNode(new IdentifierNode($$[$0]), null);
        
break;
case 14:

            this.$ = new EmptyStatementNode();
        
break;
case 15: case 16:

            this.$ = new ExpressionStatementNode($$[$0-1]);
        
break;
case 17:

            this.$ = new LabeledStatementNode(new IdentifierNode($$[$0-2]), $$[$0]);
        
break;
case 18: case 52:

            this.$ = [new IdentifierNode($$[$0])];
        
break;
case 19:

            this.$ = $$[$0-2].concat(new IdentifierNode($$[$0]));
        
break;
case 21:

            this.$ = new ProgramNode($$[$0-1]);
            return this.$;
        
break;
case 27:

            this.$ = new ThisExpressionNode();
        
break;
case 28: case 69: case 70:

            this.$ = new IdentifierNode($$[$0]);
        
break;
case 31: case 72:

            this.$ = $$[$0-1];
        
break;
case 32:

            this.$ = new ArrayExpressionNode([]);
        
break;
case 33: case 34:

            this.$ = new ArrayExpressionNode($$[$0-1]);
        
break;
case 35:

            this.$ = new ArrayExpressionNode($$[$0-2].concat(null));
        
break;
case 36:

            this.$ = new ArrayExpressionNode($$[$0-3].concat($$[$0-1]));
        
break;
case 40:

            this.$ = $$[$0-3].concat($$[$0-1]).concat($$[$0]);
        
break;
case 41:

            this.$ = [null, null];
        
break;
case 42:

            this.$ = $$[$0-1].concat(null);
        
break;
case 43:

            this.$ = new ObjectExpressionNode([]);
        
break;
case 44:

            this.$ = new ObjectExpressionNode($$[$0-1]);
        
break;
case 45:

            this.$ = new ObjectExpressionNode($$[$0-2]);
        
break;
case 48:

            this.$ = {key: $$[$0-2], value: $$[$0], kind: "init"};
        
break;
case 54: case 57: case 63: case 67:

            this.$ = new MemberExpressionNode($$[$0-3], $$[$0-1], true);
        
break;
case 55: case 58: case 64: case 68:

            this.$ = new MemberExpressionNode($$[$0-2], $$[$0], false);
        
break;
case 61: case 62: case 65: case 66:

            this.$ = new CallExpressionNode($$[$0-1], $$[$0]);
        
break;
case 80: case 83:

            this.$ = new UpdateExpressionNode("++", $$[$0-1], false);
        
break;
case 81: case 84:

            this.$ = new UpdateExpressionNode("--", $$[$0-1], false);
        
break;
case 89:

            _$[$0-1].first_line = _$[$0-1].last_line;
            _$[$0-1].first_column = _$[$0-1].last_column - 2;
            this.$ = new UpdateExpressionNode("++", $$[$0], true);
        
break;
case 90:

            _$[$0-1].first_line = _$[$0-1].last_line;
            _$[$0-1].first_column = _$[$0-1].last_column - 2;
            this.$ = new UpdateExpressionNode("--", $$[$0], true);
        
break;
case 91:

            this.$ = new UpdateExpressionNode("++", $$[$0], true);
        
break;
case 92:

            this.$ = new UpdateExpressionNode("--", $$[$0], true);
        
break;
case 93:

            this.$ = new UnaryExpressionNode("+", true, $$[$0]);
        
break;
case 94:

            this.$ = new UnaryExpressionNode("-", true, $$[$0]);
        
break;
case 95:

            this.$ = new UnaryExpressionNode("!", true, $$[$0]);
        
break;
case 97: case 101:

            this.$ = new BinaryExpressionNode("*", $$[$0-2], $$[$0]);
        
break;
case 98: case 102:

            this.$ = new BinaryExpressionNode("/", $$[$0-2], $$[$0]);
        
break;
case 99: case 103:

            this.$ = new BinaryExpressionNode("%", $$[$0-2], $$[$0]);
        
break;
case 105: case 108:

            this.$ = new BinaryExpressionNode("+", $$[$0-2], $$[$0]);
        
break;
case 106: case 109:

            this.$ = new BinaryExpressionNode("-", $$[$0-2], $$[$0]);
        
break;
case 113: case 118: case 123:

            this.$ = new BinaryExpressionNode("<", $$[$0-2], $$[$0]);
        
break;
case 114: case 119: case 124:

            this.$ = new BinaryExpressionNode(">", $$[$0-2], $$[$0]);
        
break;
case 115: case 120: case 125:

            this.$ = new BinaryExpressionNode("<=", $$[$0-2], $$[$0]);
        
break;
case 116: case 121: case 126:

            this.$ = new BinaryExpressionNode(">=", $$[$0-2], $$[$0]);
        
break;
case 128: case 133: case 138:

            this.$ = new BinaryExpressionNode("==", $$[$0-2], $$[$0]);
        
break;
case 129: case 134: case 139:

            this.$ = new BinaryExpressionNode("!=", $$[$0-2], $$[$0]);
        
break;
case 130: case 135: case 140:

            this.$ = new BinaryExpressionNode("===", $$[$0-2], $$[$0]);
        
break;
case 131: case 136: case 141:

            this.$ = new BinaryExpressionNode("!==", $$[$0-2], $$[$0]);
        
break;
case 152: case 154: case 156:

            this.$ = new LogicalExpressionNode("&&", $$[$0-2], $$[$0]);
        
break;
case 158: case 160: case 162:

            this.$ = new LogicalExpressionNode("||", $$[$0-2], $$[$0]);
        
break;
case 164: case 166: case 168:

            this.$ = new ConditionalExpressionNode($$[$0-4], $$[$0-2], $$[$0]);
        
break;
case 173: case 175: case 177:

            if ($$[$0-2].type === "SequenceExpression") {
                $$[$0-2].expressions.concat($$[$0]);
                this.$ = $$[$0-2];
            } else {
                this.$ = new SequenceExpressionNode([$$[$0-2], $$[$0]]);
            }
        
break;
case 183:

            this.$ = new LiteralNode(null);
        
break;
case 184:

            this.$ = new LiteralNode(true);
        
break;
case 185:

            this.$ = new LiteralNode(false);
        
break;
case 186:

            this.$ = new LiteralNode(parseNumericLiteral($$[$0]));
        
break;
case 187:

            this.$ = new LiteralNode($$[$0]);
        
break;
}
},
table: [o($V0,[2,23],{23:1,22:2}),{1:[3]},{3:5,4:6,5:7,6:8,7:9,8:$V1,16:$V2,17:$V3,18:12,24:[1,3],25:4,27:40,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,49:39,51:37,54:38,58:29,60:$V7,61:$V8,62:27,64:28,65:26,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,75:25,77:24,79:23,86:22,93:21,96:20,99:19,102:18,106:17,110:16,115:15,116:14,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{1:[2,21]},o($V0,[2,22]),o($V0,[2,24]),o($Vk,[2,1]),o($Vk,[2,2]),o($Vk,[2,3]),o($Vk,[2,4]),o($Vl,[2,7],{9:56}),o($Vk,[2,14]),{2:[1,58],13:[1,59],17:[1,57]},o($Vm,$Vn,{19:[1,60]}),o($Vo,[2,176]),o($Vo,[2,171]),o($Vo,[2,167],{108:[1,62],112:[1,61]}),o($Vp,[2,161],{104:[1,63]}),o($Vq,[2,155]),o($Vq,[2,150]),o($Vq,[2,147]),o($Vq,[2,144],{88:[1,64],89:[1,65],90:[1,66],91:[1,67]}),o($Vr,[2,137],{81:[1,68],82:[1,69],83:[1,70],84:[1,71]}),o($Vs,[2,122]),o($Vs,[2,111],{68:[1,72],69:[1,73]}),o($Vt,[2,107],{72:[1,74],73:[1,75],74:[1,76]}),o($Vu,[2,100]),o($Vu,[2,87]),o($Vu,[2,88]),o($Vu,[2,82],{60:[1,77],61:[1,78]}),{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:79,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:91,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:92,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:93,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:94,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:95,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:96,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},o($Vx,[2,77]),o($Vx,[2,78],{53:97,32:$Vy,35:[1,98],48:[1,99]}),o($Vx,[2,60],{53:101,32:$Vy,35:[1,102],48:[1,103]}),o($Vm,[2,56]),o($Vz,[2,27]),o($Vz,[2,29]),o($Vz,[2,30]),{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,33:104,35:$V6,39:105,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:108,107:107,111:106,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},o($Vz,[2,178]),o($Vz,[2,179]),o($Vz,[2,180]),o($Vz,[2,181]),o($Vz,[2,182]),{8:$Vv,13:$VA,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,36:[1,118],37:119,38:120,39:122,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:108,107:107,111:106,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},o($Vz,[2,183]),o($Vz,[2,184]),o($Vz,[2,185]),o($Vz,[2,186]),o($Vz,[2,187]),{3:124,4:6,5:7,6:8,7:9,8:$V1,10:[1,123],16:$V2,17:$V3,18:12,27:40,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,49:39,51:37,54:38,58:29,60:$V7,61:$V8,62:27,64:28,65:26,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,75:25,77:24,79:23,86:22,93:21,96:20,99:19,102:18,106:17,110:16,115:15,116:14,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},o($Vk,[2,15]),o($Vk,[2,16]),{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,39:125,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:108,107:107,111:106,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{3:126,4:6,5:7,6:8,7:9,8:$V1,16:$V2,17:$V3,18:12,27:40,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,49:39,51:37,54:38,58:29,60:$V7,61:$V8,62:27,64:28,65:26,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,75:25,77:24,79:23,86:22,93:21,96:20,99:19,102:18,106:17,110:16,115:15,116:14,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,39:127,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:108,107:107,111:106,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:128,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:129,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:130,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:131,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:132,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:133,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:134,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:135,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:136,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:137,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:138,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:139,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:140,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:141,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:142,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},o($Vu,[2,83]),o($Vu,[2,84]),o($VB,[2,89]),o($VB,[2,85]),o($VB,[2,86]),o($VB,[2,79],{60:[1,143],61:[1,144]}),o($VC,[2,75]),o($VC,[2,76],{53:145,32:$Vy,35:[1,146],48:[1,147]}),o($VC,[2,59],{53:148,32:$Vy,35:[1,149],48:[1,150]}),o($Vz,[2,53]),o($Vz,[2,25]),o($Vz,[2,26]),o($Vz,$Vn),{10:[1,151],16:$VD,29:$VE,40:152,41:153,42:154,43:155,44:156,45:157,55:159,121:$VF,122:$VG,123:$VH,124:$Vi,125:$Vj,126:$VI},o($VB,[2,90]),o($VB,[2,91]),o($VB,[2,92]),o($VB,[2,93]),o($VB,[2,94]),o($VB,[2,95]),o($Vm,[2,66]),{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,33:165,35:$V6,39:105,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:108,107:107,111:106,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{16:$VD,29:$VE,43:166,55:159,121:$VF,122:$VG,123:$VH,126:$VI},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,34:[1,167],35:$V6,39:169,44:48,45:47,47:85,50:83,52:84,56:168,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:108,107:107,111:106,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},o($Vm,[2,65]),{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,33:170,35:$V6,39:105,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:108,107:107,111:106,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{16:$VD,29:$VE,43:171,55:159,121:$VF,122:$VG,123:$VH,126:$VI},{13:$VJ,34:[1,172]},o($VK,[2,172]),o($VL,[2,169]),o($VL,[2,163],{108:[1,175],112:[1,174]}),o($VM,[2,157],{104:$VN}),o($VO,[2,151]),o($VO,[2,148]),o($VO,[2,145]),o($VO,[2,142],{88:[1,177],89:[1,178],90:[1,179],91:[1,180]}),o($VP,[2,127],{81:$VQ,82:$VR,83:$VS,84:$VT}),o($VU,[2,112]),o($VU,[2,110],{68:[1,185],69:[1,186]}),o($VV,[2,104],{72:$VW,73:$VX,74:$VY}),o($VB,[2,96]),o($Vz,[2,32]),{8:$Vv,13:$VZ,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,36:[1,190],39:192,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:108,107:107,111:106,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{13:[1,194],36:[1,193]},o($V_,[2,41]),o($V$,[2,37]),o($Vk,[2,5]),o($Vl,[2,6]),o($Vo,[2,177]),o($Vk,[2,17]),{19:[1,195]},o($Vp,[2,162],{104:$VN}),o($Vq,[2,156]),o($Vr,[2,138],{81:$VQ,82:$VR,83:$VS,84:$VT}),o($Vr,[2,139],{81:$VQ,82:$VR,83:$VS,84:$VT}),o($Vr,[2,140],{81:$VQ,82:$VR,83:$VS,84:$VT}),o($Vr,[2,141],{81:$VQ,82:$VR,83:$VS,84:$VT}),o($Vs,[2,123]),o($Vs,[2,124]),o($Vs,[2,125]),o($Vs,[2,126]),o($Vt,[2,108],{72:$VW,73:$VX,74:$VY}),o($Vt,[2,109],{72:$VW,73:$VX,74:$VY}),o($Vu,[2,101]),o($Vu,[2,102]),o($Vu,[2,103]),o($VB,[2,80]),o($VB,[2,81]),o($Vz,[2,62]),{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,33:196,35:$V6,39:105,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:108,107:107,111:106,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{16:$VD,29:$VE,43:197,55:159,121:$VF,122:$VG,123:$VH,126:$VI},o($Vz,[2,61]),{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,33:198,35:$V6,39:105,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:108,107:107,111:106,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{16:$VD,29:$VE,43:199,55:159,121:$VF,122:$VG,123:$VH,126:$VI},o($Vz,[2,43]),{10:[1,200],13:[1,201]},o($V01,[2,46]),{19:[1,202]},{19:[2,49]},{19:[2,50]},{19:[2,51]},o($Vz,[2,69]),o($Vz,[2,70]),o($Vz,[2,188]),o($Vz,[2,189]),o($Vz,[2,190]),o($Vz,[2,191]),o($Vz,[2,192]),{13:$VJ,36:[1,203]},o($Vm,[2,68]),o($Vz,[2,71]),{13:[1,205],34:[1,204]},o($V11,[2,73]),{13:$VJ,36:[1,206]},o($Vm,[2,58]),o($Vz,[2,31]),{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,39:207,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:108,107:107,111:106,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,39:208,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:108,107:107,111:106,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:209,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:210,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:211,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:212,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:213,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:214,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:215,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:216,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:217,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:218,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:219,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:220,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:221,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:222,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:223,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},o($Vz,[2,33]),o($V_,[2,42]),o($V$,[2,38]),o($Vz,[2,34]),{8:$Vv,13:$VA,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,36:[1,224],37:225,39:226,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:108,107:107,111:106,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,39:227,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:108,107:107,111:106,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{13:$VJ,36:[1,228]},o($Vz,[2,64]),{13:$VJ,36:[1,229]},o($Vz,[2,55]),o($Vz,[2,44]),{10:[1,230],16:$VD,29:$VE,41:231,42:154,43:155,44:156,45:157,55:159,121:$VF,122:$VG,123:$VH,124:$Vi,125:$Vj,126:$VI},{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,39:232,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:108,107:107,111:106,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},o($Vm,[2,67]),o($Vz,[2,72]),{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,39:233,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:108,107:107,111:106,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},o($Vm,[2,57]),o($VK,[2,173]),{19:[1,234]},o($VM,[2,158],{104:$VN}),o($VO,[2,152]),o($VP,[2,128],{81:$VQ,82:$VR,83:$VS,84:$VT}),o($VP,[2,129],{81:$VQ,82:$VR,83:$VS,84:$VT}),o($VP,[2,130],{81:$VQ,82:$VR,83:$VS,84:$VT}),o($VP,[2,131],{81:$VQ,82:$VR,83:$VS,84:$VT}),o($VU,[2,113]),o($VU,[2,114]),o($VU,[2,115]),o($VU,[2,116]),o($VV,[2,105],{72:$VW,73:$VX,74:$VY}),o($VV,[2,106],{72:$VW,73:$VX,74:$VY}),o($VB,[2,97]),o($VB,[2,98]),o($VB,[2,99]),o($Vz,[2,35]),{8:$Vv,13:$VZ,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,36:[1,235],39:236,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:108,107:107,111:106,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},o($V$,[2,39]),o($Vo,[2,168]),o($Vz,[2,63]),o($Vz,[2,54]),o($Vz,[2,45]),o($V01,[2,47]),o($V01,[2,48]),o($V11,[2,74]),{8:$Vv,16:$Vw,26:86,27:87,28:88,29:$V4,30:42,31:43,32:$V5,35:$V6,39:237,44:48,45:47,47:85,50:83,52:84,57:82,59:80,60:$V7,61:$V8,63:117,64:81,66:$V9,67:$Va,68:$Vb,69:$Vc,70:$Vd,71:116,76:115,78:114,80:113,87:112,94:111,97:110,100:109,103:108,107:107,111:106,118:45,119:46,120:$Ve,121:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj},o($Vz,[2,36]),o($V$,[2,40]),o($VL,[2,164])],
defaultActions: {3:[2,21],155:[2,49],156:[2,50],157:[2,51]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    function lex() {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


function parseNumericLiteral(literal) {
	if (literal.charAt(0) === "0") {
		if (literal.charAt(1).toLowerCase() === "x") {
			return parseInt(literal, 16);
		} else {
			return parseInt(literal, 8);
		}
	} else {
		return Number(literal);
	}
}

/* Begin Parser Customization Methods */
var _originalParseMethod = parser.parse;

parser.parse = function(source, args) {
	parser.wasNewLine = false;
	parser.newLine = false;
	parser.restricted = false;
    console.log("ARGS: ", args);
	return new Function('return ' + source);
};

parser.parseError = function(str, hash) {
//		alert(JSON.stringify(hash) + "\n\n\n" + parser.newLine + "\n" + parser.wasNewLine + "\n\n" + hash.expected.indexOf("';'"));
	if (!((hash.expected && hash.expected.indexOf("';'") >= 0) && (hash.token === "}" || hash.token === "EOF" || hash.token === "BR++" || hash.token === "BR--" || parser.newLine || parser.wasNewLine))) {
		throw new SyntaxError(str);
	}
};
/* End Parser Customization Methods */

/* Begin AST Node Constructors */
function ProgramNode(body) {
	this.type = "Program";
	this.body = body;
}

function EmptyStatementNode() {
	this.type = "EmptyStatement";
}

function BlockStatementNode(body) {
	this.type = "BlockStatement";
	this.body = body;
}

function ExpressionStatementNode(expression) {
	this.type = "ExpressionStatement";
	this.expression = expression;
}

function LabeledStatementNode(label, body) {
	this.type = "LabeledStatement";
	this.label = label;
	this.body = body;
}

function VariableDeclarationNode(declarations, kind) {
	this.type = "VariableDeclaration";
	this.declarations = declarations;
	this.kind = kind;
}

function VariableDeclaratorNode(id, init) {
	this.type = "VariableDeclarator";
	this.id = id;
	this.init = init;
}

function ThisExpressionNode() {
	this.type = "ThisExpression";
}

function ArrayExpressionNode(elements) {
    console.log(elements);
	this.type = "ArrayExpression";
	this.elements = elements;
}

function ObjectExpressionNode(properties) {
	this.type = "ObjectExpression";
	this.properties = properties;
}

function SequenceExpressionNode(expressions) {
	this.type = "SequenceExpression";
	this.expressions = expressions;
}

function UnaryExpressionNode(operator, prefix, argument) {
	this.type = "UnaryExpression";
	this.operator = operator;
	this.prefix = prefix;
	this.argument = argument;
}

function BinaryExpressionNode(operator, left, right) {
	this.type = "BinaryExpression";
	this.operator = operator;
	this.left = left;
	this.right = right;
}

function AssignmentExpressionNode(operator, left, right) {
	this.type = "AssignmentExpression";
	this.operator = operator;
	this.left = left;
	this.right = right;
}

function UpdateExpressionNode(operator, argument, prefix) {
	this.type = "UpdateExpression";
	this.operator = operator;
	this.argument = argument;
	this.prefix = prefix;
}

function LogicalExpressionNode(operator, left, right) {
	this.type = "LogicalExpression";
	this.operator = operator;
	this.left = left;
	this.right = right;
}

function ConditionalExpressionNode(test, consequent, alternate) {
	this.type = "ConditionalExpression";
	this.test = test;
	this.consequent = consequent;
	this.alternate = alternate;
}

function CallExpressionNode(callee, args) {
	this.type = "CallExpression";
	this.callee = callee;
	this.arguments = args;
}

function MemberExpressionNode(object, property, computed) {
	this.type = "MemberExpression";
	this.object = object;
	this.property = property;
	this.computed = computed;
}

function IdentifierNode(name) {
	this.type = "Identifier";
	this.name = name;
}

function LiteralNode(value) {
	this.type = "Literal";
	this.value = value;
}

function SourceLocation(source, start, end) {
	this.source = source;
	this.start = start;
	this.end = end;
}

/* Object and Array patterns are not part of the ECMAScript Standard
function ObjectPatternNode() {
	this.type = "ObjectPattern";
	this.properties = [];
}

function ArrayPatternNode() {
	this.type = "ArrayPattern";
	this.elements = [];
}
*/
/* End AST Node Constructors *//* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:parser.restricted = false; return "STRING_LITERAL";
break;
case 1:parser.restricted = false; return "THIS";
break;
case 2:parser.restricted = false; return "TRUE";
break;
case 3:parser.restricted = false; return "FALSE";
break;
case 4:parser.restricted = false; return "NULL";
break;
case 5:parser.restricted = false; return "IDENTIFIER";
break;
case 6:parser.restricted = false; return "NUMERIC_LITERAL";
break;
case 7:parser.restricted = false; return "NUMERIC_LITERAL";
break;
case 8:parser.restricted = false; return "NUMERIC_LITERAL";
break;
case 9:parser.restricted = false; return "{";
break;
case 10:return "}";
break;
case 11:parser.restricted = false; return "(";
break;
case 12:return ")";
break;
case 13:parser.restricted = false; return "[";
break;
case 14:return "]";
break;
case 15:return ".";
break;
case 16:parser.restricted = false; return ";";
break;
case 17:return ",";
break;
case 18:return "?";
break;
case 19:return ":";
break;
case 20:return "===";
break;
case 21:return "==";
break;
case 22:return "!==";
break;
case 23:return "!=";
break;
case 24:parser.restricted = false; return "!";
break;
case 25:return "<=";
break;
case 26:return "<";
break;
case 27:return ">=";
break;
case 28:return ">";
break;
case 29:parser.restricted = false; return "++";
break;
case 30:return "+";
break;
case 31:parser.restricted = false; return "--";
break;
case 32:return "-";
break;
case 33:return "*";
break;
case 34:return "/";
break;
case 35:return "%";
break;
case 36:return "&&";
break;
case 37:return "||";
break;
case 38:return "EOF";
break;
case 39:return "ERROR";
break;
}
},
rules: [/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})|([u]([0-9a-fA-F]){4})))|(\\(\r\n|\r|\n)))*')))/,/^(?:this\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-fA-F]){4}))((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-fA-F]){4}))|([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f])|[0-9])*))/,/^(?:((([0]|(([1-9])([0-9]+)*))\.([0-9]+)*(([eE])([+-]?[0-9]+))?)|(\.([0-9]+)(([eE])([+-]?[0-9]+))?)|(([0]|(([1-9])([0-9]+)*))(([eE])([+-]?[0-9]+))?)))/,/^(?:([0][xX]([0-9a-fA-F])+))/,/^(?:([0]([0-7])+))/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?:\?)/,/^(?::)/,/^(?:===)/,/^(?:==)/,/^(?:!==)/,/^(?:!=)/,/^(?:!)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"inclusive":true}}
});
/* Begin Lexer Customization Methods */
var _originalLexMethod = lexer.lex;

lexer.lex = function() {
	parser.wasNewLine = parser.newLine;
	parser.newLine = false;

	return _originalLexMethod.call(this);
};
/* End Lexer Customization Methods */;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}